// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ChallangeQA.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ValidacaoDaAplicacaoMaisAFeature : object, Xunit.IClassFixture<ValidacaoDaAplicacaoMaisAFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Test.feature"
#line hidden
        
        public ValidacaoDaAplicacaoMaisAFeature(ValidacaoDaAplicacaoMaisAFeature.FixtureData fixtureData, ChallangeQA_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Validação da aplicação MaisA", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT001: Exibir opções ao selecionar graduação", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT001: Exibir opções ao selecionar graduação")]
        public void CT001ExibirOpcoesAoSelecionarGraduacao()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT001: Exibir opções ao selecionar graduação", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
testRunner.Given("que o usuário esteja na tela de seleção de nível de graduação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
testRunner.When("selecionar a opção Graduação e clicar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT002: Confirmar seleção do curso de graduação", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT002: Confirmar seleção do curso de graduação")]
        public void CT002ConfirmarSelecaoDoCursoDeGraduacao()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT002: Confirmar seleção do curso de graduação", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
testRunner.Given("que o usuário clique para selecionar curso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
testRunner.When("pesquisar o curso Engenharia de Software", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
testRunner.Then("o curso Engenharia de Software deve ser exibido como selecionado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT003: Avançar após preencher todos os campos obrigatórios do cadastro", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT003: Avançar após preencher todos os campos obrigatórios do cadastro")]
        public void CT003AvancarAposPreencherTodosOsCamposObrigatoriosDoCadastro()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT003: Avançar após preencher todos os campos obrigatórios do cadastro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
testRunner.Given("que o usuário preencha o nível e o curso de graduação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
testRunner.When("tenha preenchido todos os campos obrigatórios do formulário de cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
testRunner.Then("ao clicar em \'Avançar\' deve ser direcionado para a tela que informa seu usuário e" +
                        " senha.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT004: Avançar sem preencher todos os campos obrigatórios do cadastro", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT004: Avançar sem preencher todos os campos obrigatórios do cadastro")]
        public void CT004AvancarSemPreencherTodosOsCamposObrigatoriosDoCadastro()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT004: Avançar sem preencher todos os campos obrigatórios do cadastro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
testRunner.Given("que o usuário tenha preenchido o nível e o curso de graduação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto CPF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
testRunner.Then("ao clicar em avançar uma mensagem de alerta deve ser exibida informando que o cam" +
                        "po é obrigatório.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT005: Avançar sem preencher apenas o campo nome")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT005: Avançar sem preencher apenas o campo nome")]
        public void CT005AvancarSemPreencherApenasOCampoNome()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT005: Avançar sem preencher apenas o campo nome", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
testRunner.Given("que o usuário tenha avançado as duas etapas iniciais", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto Nome", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
testRunner.Then("ao clicar em avançar um alerta deve ser exibido informando que o campo é obrigató" +
                        "rio.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT006: Avançar sem preencher apenas o campo sobrenome", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT006: Avançar sem preencher apenas o campo sobrenome")]
        public void CT006AvancarSemPreencherApenasOCampoSobrenome()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT006: Avançar sem preencher apenas o campo sobrenome", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
testRunner.Given("que o usuário tenha informado seu nivel de ensino e seu curso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto Sobrenom" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
testRunner.Then("ao tentar avançar um alerta deve ser exibido informando que o campo é obrigatório" +
                        ".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT007: Avançar sem preencher apenas o campo email", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT007: Avançar sem preencher apenas o campo email")]
        public void CT007AvancarSemPreencherApenasOCampoEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT007: Avançar sem preencher apenas o campo email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
testRunner.Given("que o usuário tenha informado os dados das etapas anteriores", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
testRunner.Then("ao avançar sem informar o campo email um alerta deve ser exibido campo é obrigató" +
                        "rio.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT008: Avançar sem preencher apenas o campo celular", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT008: Avançar sem preencher apenas o campo celular")]
        public void CT008AvancarSemPreencherApenasOCampoCelular()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT008: Avançar sem preencher apenas o campo celular", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
testRunner.Given("que o usuário tenha informado as etapas anteriores", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto celular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
testRunner.Then("ao avançar sem informar o campo celular um alerta deve ser exibido campo é obriga" +
                        "tório.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT009: Avançar sem preencher apenas o campo cep", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT009: Avançar sem preencher apenas o campo cep")]
        public void CT009AvancarSemPreencherApenasOCampoCep()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT009: Avançar sem preencher apenas o campo cep", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
testRunner.Given("que o usuário que os dados das etapas anteriores tenham sido informadas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto cep", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
testRunner.Then("ao avançar sem informar o campo cep um alerta deve ser exibido campo é obrigatóri" +
                        "o.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT010: Avançar sem preencher apenas o campo endereço", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT010: Avançar sem preencher apenas o campo endereço")]
        public void CT010AvancarSemPreencherApenasOCampoEndereco()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT010: Avançar sem preencher apenas o campo endereço", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
testRunner.Given("que os dados das etapas anteriores tenham sido informados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto endereço" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
testRunner.Then("ao avançar sem informar o campo endereço um alerta deve ser exibido campo é obrig" +
                        "atório.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT011: Avançar sem preencher apenas o campo bairro", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT011: Avançar sem preencher apenas o campo bairro")]
        public void CT011AvancarSemPreencherApenasOCampoBairro()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT011: Avançar sem preencher apenas o campo bairro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
testRunner.Given("que os dados das etapas anteriores tenham sido preenchidos corretamente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto bairro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
testRunner.Then("ao avançar sem informar o bairro um alerta deve ser exibido campo é obrigatório.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT012: Avançar sem preencher apenas o campo cidade", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT012: Avançar sem preencher apenas o campo cidade")]
        public void CT012AvancarSemPreencherApenasOCampoCidade()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT012: Avançar sem preencher apenas o campo cidade", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 70
testRunner.Given("que os dados das etapas anteriores tenham sido corretamente inseridas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto cidade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
testRunner.Then("ao avançar sem informar o cidade um alerta deve ser exibido campo é obrigatório.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT013: Avançar sem preencher apenas o campo estado", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT013: Avançar sem preencher apenas o campo estado")]
        public void CT013AvancarSemPreencherApenasOCampoEstado()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT013: Avançar sem preencher apenas o campo estado", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 76
testRunner.Given("que os usuario informou os dados necessários antes de preencher o formulário", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto estado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
testRunner.Then("ao avançar sem informar o estado um alerta deve ser exibido campo é obrigatório.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT014: Avançar sem preencher apenas o campo pais", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT014: Avançar sem preencher apenas o campo pais")]
        public void CT014AvancarSemPreencherApenasOCampoPais()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT014: Avançar sem preencher apenas o campo pais", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
testRunner.Given("que os usuario informou todos os dados anteriores", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
testRunner.When("tenha preenchido os campos obrigatórios do formulário de cadastro exceto pais", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
testRunner.Then("ao avançar sem informar o pais um alerta deve ser exibido campo é obrigatório.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT015: Permitir avanço sem preenchimento do campo Complemento", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT015: Permitir avanço sem preenchimento do campo Complemento")]
        public void CT015PermitirAvancoSemPreenchimentoDoCampoComplemento()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT015: Permitir avanço sem preenchimento do campo Complemento", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 88
testRunner.Given("que o usuário tenha preenchido as informações anteriores ao formulário de inscriç" +
                        "ão", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 89
testRunner.When("clicar no botão \"Avançar\" sem preencher o campo Complemento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
testRunner.Then("o sistema deve permitir que o usuário avance para a tela de login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT016: Exibir alerta ao preencher o CPF com formato inválido", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT016: Exibir alerta ao preencher o CPF com formato inválido")]
        public void CT016ExibirAlertaAoPreencherOCPFComFormatoInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT016: Exibir alerta ao preencher o CPF com formato inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
testRunner.Given("que o usuário esteja na página de formulário de inscrição", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
testRunner.When("preencher o campo CPF com o valor invalido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
testRunner.Then("ao clicar em avançar uma mensagem de alerta deve ser exibida informando que o CPF" +
                        " é inválido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT017: Validar formato do email inválido", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT017: Validar formato do email inválido")]
        public void CT017ValidarFormatoDoEmailInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT017: Validar formato do email inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 100
testRunner.Given("que o usuário informe os dados cadastrais", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
testRunner.When("preencher o campo email com o valor invalido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
testRunner.Then("uma mensagem de alerta deve ser exibida informando Email inválido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT018: Preencher o campo Celular com menos caracteres", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT018: Preencher o campo Celular com menos caracteres")]
        public void CT018PreencherOCampoCelularComMenosCaracteres()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT018: Preencher o campo Celular com menos caracteres", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 106
testRunner.Given("que o usuário foi direcionado a tela de cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 107
testRunner.When("o usuário preenche o campo Celular com menos de 10 caracteres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
testRunner.Then("uma mensagem de alerta deve ser exibida informando sobre a quantidade de caracter" +
                        "es", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT019: Preencher o campo Celular com mais caracteres", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT019: Preencher o campo Celular com mais caracteres")]
        public void CT019PreencherOCampoCelularComMaisCaracteres()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT019: Preencher o campo Celular com mais caracteres", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
 testRunner.Given("que o usuário foi direcionado a tela de cadastro e os dados foram informados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
 testRunner.When("o usuário preenche o campo Celular com mais de 15 caracteres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.Then("uma mensagem de alerta deve ser exibida informando sobre a quantidade maxima perm" +
                        "itida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT020: Preencher o campo telefone com menos caracteres na tela de cadastro", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT020: Preencher o campo telefone com menos caracteres na tela de cadastro")]
        public void CT020PreencherOCampoTelefoneComMenosCaracteresNaTelaDeCadastro()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT020: Preencher o campo telefone com menos caracteres na tela de cadastro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 118
 testRunner.Given("que o usuário está na tela de cadastro informando os dados necessários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 119
 testRunner.When("o usuário preenche o campo Telefone com menos de 10 caracteres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
 testRunner.Then("deve ser exibida a mensagem no campo telefone Devem ser informados no mínimo 10 c" +
                        "aracteres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT021: Preencher o campo telefone com mais caracteres na tela de cadastro", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT021: Preencher o campo telefone com mais caracteres na tela de cadastro")]
        public void CT021PreencherOCampoTelefoneComMaisCaracteresNaTelaDeCadastro()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT021: Preencher o campo telefone com mais caracteres na tela de cadastro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 124
 testRunner.Given("que o usuário está na tela de cadastro preenchendo as informações pessoais", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
 testRunner.When("o usuário preenche o campo Telefone com mais de 15 caracteres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
 testRunner.Then("deve ser exibida a mensagem no campo telefone Devem ser informados no máximo 15 c" +
                        "aracteres", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT022: Validar a exibição da flag Possui deficiência", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT022: Validar a exibição da flag Possui deficiência")]
        public void CT022ValidarAExibicaoDaFlagPossuiDeficiencia()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT022: Validar a exibição da flag Possui deficiência", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 130
 testRunner.Given("que tenha preenchido as informações do formulario corretamente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 131
 testRunner.When("o usuário marcar a opção Possui alguma deficiência?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
 testRunner.Then("um campo para preenchimento relacionado à deficiência deve ser exibido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT023: Validar preenchimento do nome social opcional", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT023: Validar preenchimento do nome social opcional")]
        public void CT023ValidarPreenchimentoDoNomeSocialOpcional()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT023: Validar preenchimento do nome social opcional", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 136
testRunner.Given("que o usuário informe os dados necessários antes de preencher o formulario", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 137
testRunner.When("preencher o campo Nome social com Mariana", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
testRunner.Then("o valor Mariana deve ser mantido e aceito como nome social", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT024: Retornar para tela selecione seu nível de ensino", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT024: Retornar para tela selecione seu nível de ensino")]
        public void CT024RetornarParaTelaSelecioneSeuNivelDeEnsino()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT024: Retornar para tela selecione seu nível de ensino", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 142
testRunner.Given("que o usuário esteja na tela selecione seu curso de Graduação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
testRunner.When("clicar no botão voltar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
testRunner.Then("o sistema deve retornar para a tela de Selecione seu nível de ensino", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT025: Direcionar usuário para tela de login", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT025: Direcionar usuário para tela de login")]
        public void CT025DirecionarUsuarioParaTelaDeLogin()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT025: Direcionar usuário para tela de login", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 148
testRunner.Given("que o usuário tenha informado corretamente todos os dados cadastrais", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 149
testRunner.When("o usuário avançar para a próxima etapa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
testRunner.Then("ele deve ver a tela inicial com a mensagem de boas-vindas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT026: Acessar com credenciais válidas", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT026: Acessar com credenciais válidas")]
        public void CT026AcessarComCredenciaisValidas()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT026: Acessar com credenciais válidas", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
testRunner.Given("que o usuário tenha realizado o cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 155
testRunner.When("clicar no botão acessar área do candidato", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
testRunner.Then("ao informar login e senha corretamente deve ser direcionado para area do candidat" +
                        "o", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT027: Acessar com credenciais invalidas", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT027: Acessar com credenciais invalidas")]
        public void CT027AcessarComCredenciaisInvalidas()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT027: Acessar com credenciais invalidas", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 159
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 160
testRunner.Given("que o usuário avançou todas as etapas de cadastrais", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 161
testRunner.When("avançar para tela area do candidato", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
testRunner.Then("ao informar login e senha incorretos deve exibir alerta informado credenciais inv" +
                        "alidas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT028: Tentativa de login informando apenas o campo senha inválido", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT028: Tentativa de login informando apenas o campo senha inválido")]
        public void CT028TentativaDeLoginInformandoApenasOCampoSenhaInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT028: Tentativa de login informando apenas o campo senha inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 167
testRunner.Given("que depois de preencher os dados para cadastro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 168
testRunner.When("preencher apenas o campo usuário com o valor inválido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 169
testRunner.Then("o sistema deve alertar que o usuário é invalido não permitindo login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT029: Tentativa de login informando apenas o campo senha é inválido", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT029: Tentativa de login informando apenas o campo senha é inválido")]
        public void CT029TentativaDeLoginInformandoApenasOCampoSenhaEInvalido()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT029: Tentativa de login informando apenas o campo senha é inválido", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 173
testRunner.Given("que depois de preencher o formulário pessoal e avançar para o login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 174
testRunner.When("preencher apenas o campo senha com o valor inválido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
testRunner.Then("o sistema deve alertar que a senha é invalida não permitindo login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT030: Redirecionamento para recuperação de usuário", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT030: Redirecionamento para recuperação de usuário")]
        public void CT030RedirecionamentoParaRecuperacaoDeUsuario()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT030: Redirecionamento para recuperação de usuário", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 179
testRunner.Given("que após o cadastro o usuário esteja na tela de login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 180
testRunner.When("o link Recuperar usuário for clicado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 181
testRunner.Then("uma mensagem deve ser exibida com o texto Usuário recuperado. Verifique seu e-mai" +
                        "l", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT031: Voltar para tela de login após recuperação de usuário", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT031: Voltar para tela de login após recuperação de usuário")]
        public void CT031VoltarParaTelaDeLoginAposRecuperacaoDeUsuario()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT031: Voltar para tela de login após recuperação de usuário", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 185
testRunner.Given("que o usuário realizou o cadastro e foi direcionado para tela de login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 186
testRunner.When("clicar no link recuperar usuário um alerta será exibido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
testRunner.Then("ao clicar em voltar para home deve ser direcionado novamente para tela de login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT032: Redirecionamento para redefinição de senha", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT032: Redirecionamento para redefinição de senha")]
        public void CT032RedirecionamentoParaRedefinicaoDeSenha()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT032: Redirecionamento para redefinição de senha", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 190
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 191
testRunner.Given("que após o cadastro o usuário esteja na tela de login e senha", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 192
testRunner.When("o Redefinir Senha for clicado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 193
testRunner.Then("uma mensagem deve ser exibida informando que a senha foi redefinida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CT033: Voltar para tela de login após recuperação de senha", Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Validação da aplicação MaisA")]
        [Xunit.TraitAttribute("Description", "CT033: Voltar para tela de login após recuperação de senha")]
        public void CT033VoltarParaTelaDeLoginAposRecuperacaoDeSenha()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CT033: Voltar para tela de login após recuperação de senha", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 196
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 197
testRunner.Given("que após informar os dados pessoais o usuário esteja na tela de login e senha", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 198
testRunner.When("clicar no link de recuperar senha", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 199
testRunner.Then("ao clicar em voltar para home sera direcionado para tela de login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ValidacaoDaAplicacaoMaisAFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ValidacaoDaAplicacaoMaisAFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
